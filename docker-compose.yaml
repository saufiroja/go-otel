version: '3.7'
services:
  auth-service:
    image: auth-service:1.0.2
    build:
      context: ./auth-service
      dockerfile: ./Dockerfile
    container_name: auth-service
    environment:
      - GO_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASS=postgres
      - DB_NAME=accountdb
      - DB_SSL_MODE=disable
      - HTTP_PORT=8080
      - OTEL_ENDPOINT=otel-collector:4317
    ports:
      - '8080:8080'
    labels:
      logging: 'promtail'
      logging_jobname: 'auth-service'
    depends_on:
      - postgres
      - otel-collector
    networks:
      - go-otel

  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d/
    networks:
      - go-otel

  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    networks:
      - go-otel

  grafana:
    image: grafana/grafana:latest
    restart: always
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
      - loki
    ports:
      - '3000:3000'
    networks:
      - go-otel

  loki:
    image: grafana/loki:latest
    ports:
      - '3100:3100'
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./observability/loki/loki-config.yaml:/mnt/loki-local-config.yaml
    networks:
      - go-otel

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./observability/promtail/promtail-config.yaml:/etc/promtail/docker-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/docker-config.yaml
    depends_on:
      - loki
    networks:
      - go-otel

  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: otel-collector
    restart: always
    command: ['--config=/etc/otel-collector-config.yaml', '']
    volumes:
      - ./observability/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - '1888:1888' # pprof extension
      - '8888:8888' # Prometheus metrics exposed by the collector
      - '8889:8889' # Prometheus exporter metrics
      - '13133:13133' # health_check extension
      - '4317:4317' # OTLP gRPC receiver
      - '4318:4318' # OTLP HTTP receiver
      - '55679:55679' # zpages extension
    depends_on:
      - jaeger-all-in-one
    networks:
      - go-otel

  jaeger-all-in-one:
    image: jaegertracing/all-in-one:1.60
    restart: always
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - '16686:16686'
    networks:
      - go-otel

networks:
  go-otel:
    driver: bridge

volumes:
  postgres-data:
  grafana-data:
